#!/bin/sh -e

# Convert a JSON string into ENV files.
#
# Usage:
#   json2env <json_file> <output_path> <jq_query> <prefix>
#   json2env config.json /env/config .config CONFIG_
#
# This script exports JSON to a collection of files whose filename is
# the concatenated JSON key and whose value is the file contents. Use
# in combination with `chpst -e` to load the directory of exported files
# into a script's environemnt as ENV vars.
#
# ENV var names conform to
# [IEEE Std 1003.1-2008 / IEEE POSIX P1003.2/ISO 9945.2](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_10_02).
# JSON keys are munged into ENV compatible keys by concatenating
# nested keys with an underscore `_`, uppercasing all letters,
# and effectively applying the following regexes:
#
# /-/_/g                    <-- convert hyphens to underscores
# /^([^a-zA-Z0-9_])/KEY$1/  <-- prefix invalid first char with 'KEY'
# /[a-zA-Z0-9_]//g          <-- remove all non-alphanumeric or underscore chars
#
# The 'KEY' prefix is added to invalid first characters to avoid
# collision with numeric keys or empty ENV var names.
#
# Example:
# JSON   ->   ENV
# "a"    ->   A
# "1"    ->   KEY1
# "a1"   ->   A1
# "a.1"  ->   A1
# "A-1"  ->   A_1
# "~"    ->   KEY
# "key"  ->   KEY
#
# Note that "a1" and "a.1" keys collide as well as any single
# character invalid key and "key". As a general rule, it's
# safest to use JSON keys that only contain alpha-numeric and
# underscore characters. It's also best practice to avoid using
# the string "key" for JSON keys.
#
# Keys for nested objects are concatenated with underscores.
#
# Arrays include a cooresponding "_NUM_" in the ENV name to
# indicate array position.
#
# The contents stored in each file is the raw JSON data witout
# enclosing quotes for string values.
#
# JSON:
#
# {
#   "somekey": {
#     "nested": {
#       "anarray": [
#         "item1",
#         {
#           "item2": "value"
#         }
#       ]
#     }
#   }
# }
#
# FILENAME << FILE CONTENTS:
#
# SOMEKEY << {"somekey": {"nested": {"annarray": ["item1", {"item2": "value"}]}}}
# SOMEKEY_NESTED << {"annarray": ["item1", {"item2": "value"}]}
# SOMEKEY_NESTED_ANARAY << ["item1", {"item2": "value"}]
# SOMEKEY_NESTED_ANARRAY_0 << item1
# SOMEKEY_NESTED_ANARRAY_1 << {"item2": "value"}
# SOMEKEY_NESTED_ANARRAY_1_ITEM2 << value
#
#
# Examples:
#
# json2env config.json /env/config ."some-key"
#
# Note that jq requires special handling of object keys with hyphens.
# Quotes must be added after the period or jq will throw an error.
#
#


# Uncomment to output all commands to stdout for debugging
# set -x


# @param json     JSON string
# @param path     path to directory where ENV files will be exported
# @param key      optional jq query string
# @param prefix   Optional env var prefix
json2env() {
  local json; json="$1"
  local path; path="$2"
  local key; key="$3"
  local prefix; prefix="$4"
  local val
  local filename

  val=$(cat $json | jq -r -c "$key")

  filename="$prefix$key"
  # Remove '.' if first char
  filename=$(echo $filename | sed -e 's/^\.//')
  # Convert '.' '[' ']' to '_'
  filename=$(echo $filename | sed -e 's/\(\[\|\]\|\.\)/_/g')
  # Remove '-' chars
  filename=$(echo $filename | sed -e 's/[-"]//g')
  ## TODO: Joe, do we need different non-alpha here?
  ## Remove non alphanumeric, '_', or '-' chars
  ## filename=$(echo $filename | sed -e 's/[^[:alnum:]]//g')
  # Remove double underscores
  filename=$(echo $filename | sed -e 's/__/_/g')
  # Remove trailing underscores
  filename=$(echo $filename | sed -e 's/\(^_\|_$\)//g')
  # Convert to upper
  filename=$(echo $filename | tr "[:lower:]" "[:upper:]")

  # Write value to file
  echo $val > $filename

  # Return if val is empty
  [ -z "$val" ] && return 0

  local keys
  # Array
  if [ $(echo "$val" | head -c 1) = "[" ]; then
    keys=$(echo $runtime | jq -r -c "$key | keys[]")
    for k in $keys; do
      json2env $json $path "$key[$k]" $prefix
    done
  # Object
  elif [ $(echo "$val" | head -c 1) = "{" ]; then
    keys=$(echo $runtime | jq -r -c "$key | keys[]")
    for k in $keys; do
      json2env $json $path "$key.\"$k\"" $prefix
    done
  fi
}


# Main
# Only run the script if params are provided.
# Useful for sourcing the file for testing and access to functions.
if [ "$#" -gt 0 ]; then
  json2env "$@"
fi
